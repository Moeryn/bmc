cmake_minimum_required(VERSION 2.8)
project(bmc)
if (CMAKE_COMPILER_IS_GNUCC)
  execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion
                  OUTPUT_VARIABLE GCC_VERSION)
  if (GCC_VERSION VERSION_LESS 4.5)
    message(FATAL_ERROR "GCC is too old (<= 4.5)")
  endif()
endif()
add_subdirectory(ttb)
find_package(Boost 1.48.0 REQUIRED)
include_directories(${PROJECT_SOURCE_DIR})
include_directories(${Boost_INCLUDE_DIRS})
add_definitions("-std=c++0x")
add_library(bmc_parse SHARED
            brlsym.cpp music.cpp numbers.cpp measure.cpp score.cpp compiler.cpp
           )
target_link_libraries(bmc_parse bmc_ttb)
add_definitions(-DSOUNDFONT_PATH="/usr/share/sounds/sf2/FluidR3_GM.sf2")
add_executable(bmc main.cpp fluidsynth.cpp)
find_library(FLUIDSYNTH_LIBRARY fluidsynth)
target_link_libraries(bmc bmc_parse ${FLUIDSYNTH_LIBRARY})
add_definitions(-DHAVE_ICONV_H=1)
add_definitions(-DHAVE_WCHAR_H=1)
add_definitions(-DTABLES_DIRECTORY="${CMAKE_INSTALL_PREFIX}/share/${CMAKE_PROJECT_NAME}/Tables")
add_executable(brltr brltr.cpp)
target_link_libraries(brltr bmc_ttb)
install(TARGETS brltr DESTINATION bin)
add_executable(bmc_test test.cpp)
target_link_libraries(bmc_test bmc_parse)
enable_testing()
add_test(test bmc_test)
install(TARGETS bmc DESTINATION bin)
install(TARGETS bmc_parse DESTINATION lib)

# build a CPack driven installer package
include(InstallRequiredSystemLibraries)
set(CPACK_RESOURCE_FILE_LICENSE "${bmc_SOURCE_DIR}/LICENSE.txt")
set(CPACK_PACKAGE_VERSION_MAJOR 0)
set(CPACK_PACKAGE_VERSION_MINOR 0)
set(CPACK_PACKAGE_CONTACT       "Mario Lang <mlang@delysid.org>")
set(CPACK_STRIP_FILES           TRUE)
include(CPack)
